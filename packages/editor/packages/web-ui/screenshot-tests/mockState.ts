import { CodeBlockGraphicData, Output, State } from '@8f4e/editor-state';

const codeBlocks = new Set<CodeBlockGraphicData>([
	{
		code: ['module test', '', '; Hello world', '', 'moduleEnd'],
		codeBlocks: new Set(),
		codeColors: [[], [], [], [], []],
		codeToRender: [
			[48, 32, 109, 111, 100, 117, 108, 101, 32, 116, 101, 115, 116],
			[49, 32],
			[50, 32, 59, 32, 72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100],
			[51, 32],
			[52, 32, 109, 111, 100, 117, 108, 101, 69, 110, 100],
		],
		cursor: { x: 112, y: 0, row: 0, col: 11 },
		extras: {
			inputs: new Map(),
			outputs: new Map(),
			debuggers: new Map(),
			switches: new Map(),
			buttons: new Map(),
			pianoKeyboards: new Map(),
			bufferPlotters: new Map(),
			errorMessages: new Map(),
		},
		gaps: new Map(),
		gridX: -32,
		gridY: -11,
		height: 80,
		id: 'test',
		isOpen: true,
		lastUpdated: 0,
		minGridWidth: 32,
		offsetX: 0,
		offsetY: 0,
		padLength: 1,
		positionOffsetterXWordAddress: undefined,
		positionOffsetterYWordAddress: undefined,
		trimmedCode: ['module test', '', '; Hello world', '', 'moduleEnd'],
		viewport: { x: 0, y: 0 },
		width: 256,
		x: -256,
		y: -176,
	},
]);

const mockState: State = {
	colorSchemes: {
		default: {
			text: {
				lineNumber: 'rgba(51,51,51,255)',
				instruction: 'rgba(136,126,203,255)',
				codeComment: 'rgba(102,102,102,255)',
				code: 'rgba(255,255,255,255)',
				numbers: 'rgba(201,212,135,255)',
				menuItemText: 'rgba(255,255,255,255)',
				menuItemTextHighlighted: 'rgba(0,0,0,255)',
				dialogText: '#ffffff',
				dialogTitle: '#ffffff',
				binaryZero: 'rgba(201,212,135,255)',
				binaryOne: 'rgba(201,212,135,255)',
			},
			fill: {
				menuItemBackground: 'rgba(0,0,0,255)',
				menuItemBackgroundHighlighted: 'rgba(255,255,255,255)',
				background: '#000000',
				backgroundDots: '#444444',
				backgroundDots2: '#444444',
				moduleBackground: '#000000',
				moduleBackgroundDragged: 'rgba(0,0,0,0.8)',
				wire: '#ffffff',
				wireHighlighted: '#ffffff',
				errorMessageBackground: '#cc0000',
				dialogBackground: '#000000',
				dialogDimmer: 'rgba(0,0,0,0.5)',
				highlightedCodeLine: '#333333',
				plotterBackground: '#001100',
				plotterTrace: '#66ff66',
			},
			icons: {
				outputConnectorBackground: '#003300',
				inputConnectorBackground: '#003300',
				switchBackground: '#003300',
				inputConnector: '#ffffff',
				outputConnector: '#ffffff',
				feedbackScale: ['#ff0000', '#cc0033', '#990066', '#660099', '#3300cc', '#0000ff'],
				arrow: '#ffffff',
				pianoKeyWhite: '#ffffff',
				pianoKeyWhiteHighlighted: '#ff0000',
				pianoKeyWhitePressed: '#cccccc',
				pianoKeyBlack: '#000000',
				pianoKeyBlackHighlighted: '#ff0000',
				pianoKeyBlackPressed: '#333333',
				pianoKeyboardBackground: '#999999',
				pianoKeyboardNote: '#ffffff',
				pianoKeyboardNoteHighlighted: '#ff0000',
			},
		},
	},
	compilationTime: 0,
	compiler: {
		allocatedMemorySize: 0,
		buildErrors: [],
		codeBuffer: new Uint8Array(),
		compilationTime: 0,
		compiledModules: {},
		compilerOptions: {
			initialMemorySize: 1000,
			maxMemorySize: 10000,
			startingMemoryWordAddress: 0,
			environmentExtensions: {
				constants: {},
				ignoredKeywords: ['debug', 'button', 'switch', 'offset', 'plot', 'piano'],
			},
		},
		cycleTime: 0,
		isCompiling: false,
		lastCompilationStart: 0,

		memoryBuffer: new Int32Array(),
		memoryBufferFloat: new Float32Array(),
		memoryRef: new WebAssembly.Memory({ initial: 1000, maximum: 10000, shared: true }),
		timerAccuracy: 0,
	},
	editorSettings: {
		colorScheme: 'default',
		font: '8x16',
	},
	featureFlags: {
		contextMenu: true,
		infoOverlay: false,
		moduleDragging: false,
		viewportDragging: false,
		persistentStorage: false,
		editing: false,
	},
	graphicHelper: {
		activeViewport: {
			code: [],
			codeBlocks,
			codeColors: [],
			codeToRender: [],
			cursor: { x: 0, y: 0, row: 0, col: 0 },
			extras: {
				inputs: new Map(),
				outputs: new Map(),
				debuggers: new Map(),
				switches: new Map(),
				buttons: new Map(),
				pianoKeyboards: new Map(),
				bufferPlotters: new Map(),
				errorMessages: new Map(),
			},
			gaps: new Map(),
			gridX: 0,
			gridY: 0,
			height: 0,
			id: '',
			isOpen: true,
			lastUpdated: 0,
			minGridWidth: 32,
			offsetX: 0,
			offsetY: 0,
			padLength: 1,
			trimmedCode: [],
			viewport: { x: -280, y: -208 },
			width: 0,
			x: 0,
			y: 0,
		},
		contextMenu: {
			highlightedItem: 0,
			itemWidth: 200,
			items: [],
			open: false,
			x: 0,
			y: 0,
			menuStack: [],
		},
		dialog: {
			show: false,
			text: '',
			title: '',
			buttons: [],
		},
		draggedCodeBlock: undefined,
		globalViewport: {
			width: 1024,
			height: 768,
			roundedHeight: 768,
			roundedWidth: 1024,
			vGrid: 8,
			hGrid: 16,
			borderLineCoordinates: {
				top: {
					startX: 0,
					startY: 0,
					endX: 1024,
					endY: 0,
				},
				right: {
					startX: 1024,
					startY: 0,
					endX: 1024,
					endY: 768,
				},
				bottom: {
					startX: 0,
					startY: 768,
					endX: 1024,
					endY: 768,
				},
				left: {
					startX: 0,
					startY: 0,
					endX: 0,
					endY: 768,
				},
			},
			center: {
				x: 512,
				y: 384,
			},
		},
		outputsByWordAddress: new Map<number, Output>(),
		selectedCodeBlock: undefined,
		spriteLookups: undefined, // Going to be set later by the web-ui
	},
	midi: {
		inputs: [],
		outputs: [],
	},
	project: {
		title: 'Test Project',
		author: 'Test Author',
		description: 'Test Description',
		codeBlocks: [],
		viewport: { x: 0, y: 0 },
		selectedRuntime: 0,
		runtimeSettings: [
			{
				runtime: 'WebWorkerLogicRuntime',
				sampleRate: 50,
			},
		],
		compiledModules: {},
	},
	callbacks: {
		requestRuntime: async () => () => () => {},
		loadProjectFromStorage: async () => null,
	},
};

export default mockState;
