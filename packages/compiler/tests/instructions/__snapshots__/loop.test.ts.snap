// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`infinite loop protection if the generated AST, WAT and memory map match the snapshot 1`] = `
[
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "loop",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "int",
    "lineNumber": 1,
  },
  {
    "arguments": [],
    "instruction": "loop",
    "lineNumber": 3,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "&counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 4,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 5,
  },
  {
    "arguments": [
      {
        "isInteger": true,
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "push",
    "lineNumber": 6,
  },
  {
    "arguments": [],
    "instruction": "add",
    "lineNumber": 7,
  },
  {
    "arguments": [],
    "instruction": "store",
    "lineNumber": 8,
  },
  {
    "arguments": [],
    "instruction": "loopEnd",
    "lineNumber": 9,
  },
  {
    "arguments": [],
    "instruction": "moduleEnd",
    "lineNumber": 11,
  },
]
`;

exports[`infinite loop protection if the generated AST, WAT and memory map match the snapshot 2`] = `
"(module
  (type (;0;) (func))
  (import "js" "memory" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32)
    i32.const 0
    local.set 0
    block  ;; label = @1
      loop  ;; label = @2
        local.get 0
        i32.const 1000
        i32.ge_s
        if  ;; label = @3
          i32.const 4
          i32.const 3
          i32.store
          br 2 (;@1;)
        end
        local.get 0
        i32.const 1
        i32.add
        local.set 0
        i32.const 0
        i32.const 0
        i32.load
        i32.const 1
        i32.add
        i32.store
        br 0 (;@2;)
      end
    end)
  (export "test" (func 0)))
"
`;

exports[`infinite loop protection if the generated AST, WAT and memory map match the snapshot 3`] = `
Map {
  "counter" => {
    "byteAddress": 0,
    "default": 0,
    "elementWordSize": 4,
    "id": "counter",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 0,
    "wordAlignedSize": 1,
  },
  "__loopErrorSignaler" => {
    "byteAddress": 4,
    "default": -1,
    "elementWordSize": 4,
    "id": "__loopErrorSignaler",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 1,
    "wordAlignedSize": 1,
  },
}
`;

exports[`loop if the generated AST, WAT and memory map match the snapshot 1`] = `
[
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "loop",
      },
    ],
    "instruction": "module",
    "lineNumber": 0,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "int",
    "lineNumber": 1,
  },
  {
    "arguments": [],
    "instruction": "loop",
    "lineNumber": 3,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 4,
  },
  {
    "arguments": [
      {
        "isInteger": true,
        "type": "literal",
        "value": 10,
      },
    ],
    "instruction": "push",
    "lineNumber": 5,
  },
  {
    "arguments": [],
    "instruction": "equal",
    "lineNumber": 6,
  },
  {
    "arguments": [
      {
        "isInteger": true,
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "branchIfTrue",
    "lineNumber": 7,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "&counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 9,
  },
  {
    "arguments": [
      {
        "type": "identifier",
        "value": "counter",
      },
    ],
    "instruction": "push",
    "lineNumber": 10,
  },
  {
    "arguments": [
      {
        "isInteger": true,
        "type": "literal",
        "value": 1,
      },
    ],
    "instruction": "push",
    "lineNumber": 11,
  },
  {
    "arguments": [],
    "instruction": "add",
    "lineNumber": 12,
  },
  {
    "arguments": [],
    "instruction": "store",
    "lineNumber": 13,
  },
  {
    "arguments": [],
    "instruction": "loopEnd",
    "lineNumber": 14,
  },
  {
    "arguments": [],
    "instruction": "moduleEnd",
    "lineNumber": 16,
  },
]
`;

exports[`loop if the generated AST, WAT and memory map match the snapshot 2`] = `
"(module
  (type (;0;) (func))
  (import "js" "memory" (memory (;0;) 1))
  (func (;0;) (type 0)
    (local i32)
    i32.const 0
    local.set 0
    block  ;; label = @1
      loop  ;; label = @2
        local.get 0
        i32.const 1000
        i32.ge_s
        if  ;; label = @3
          i32.const 4
          i32.const 3
          i32.store
          br 2 (;@1;)
        end
        local.get 0
        i32.const 1
        i32.add
        local.set 0
        i32.const 0
        i32.load
        i32.const 10
        i32.eq
        br_if 1 (;@1;)
        i32.const 0
        i32.const 0
        i32.load
        i32.const 1
        i32.add
        i32.store
        br 0 (;@2;)
      end
    end)
  (export "test" (func 0)))
"
`;

exports[`loop if the generated AST, WAT and memory map match the snapshot 3`] = `
Map {
  "counter" => {
    "byteAddress": 0,
    "default": 0,
    "elementWordSize": 4,
    "id": "counter",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 0,
    "wordAlignedSize": 1,
  },
  "__loopErrorSignaler" => {
    "byteAddress": 4,
    "default": -1,
    "elementWordSize": 4,
    "id": "__loopErrorSignaler",
    "isInteger": true,
    "isPointer": false,
    "isPointingToInteger": false,
    "isPointingToPointer": false,
    "numberOfElements": 1,
    "type": "int",
    "wordAlignedAddress": 1,
    "wordAlignedSize": 1,
  },
}
`;
